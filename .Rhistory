pvals <- runif(8793,0,1)
sum(pvals < 0.05/10000)
set.seed(1)
sum(pvals < 0.05/10000)
?which
round(0.1051,2)
round(0.125,2)
round(0.3989)
round(0.3989,2)
?barplot
?pnorm()
?dbinom
?qnorm()
?qt
sd(c(156,184,172,165))
?qt
library("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
library("swirl")
install_from_swirl("Regression Models")
library(swirl)
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
install.packages("RCurl")
library(swirl)
library(RCurl)
install.packages("RCurl")
library(swirl)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_course_zip("C:\Users\abc\Downloads\swirl_courses-master(1).zip", multi=TRUE,
which_course="Getting and Cleaning Data")
install_course_zip("C:\users\abc\Downloads\swirl_courses-master(1).zip", multi=TRUE,
which_course="Getting and Cleaning Data")
install_course_zip("C:/Users/abc/Downloads/swirl_courses-master(1).zip", multi=TRUE,
which_course="Getting and Cleaning Data")
install_course_zip("C:\users\abc\Downloads\swirl_courses-master.zip", multi=TRUE,
which_course="Getting and Cleaning Data")
install_course_zip("C:/Users/abc/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="Getting and Cleaning Data")
rm()
rm(list = ls())
swirl()
?read.csv()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:50
-5:520
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size>100500)
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
install_from_swirl("Getting and Cleaning Data")
remove.packages(curl)
remove.packages("curl")
install.packages(curl)
install.packages("curl")
install.packages("curl")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
q()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(X:size)
select(cran, -size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version >= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
cran2
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb= size_mb / 2^10)
mutate(cran3, correct_size= size-1000)
mutate(cran3, correct_size= size+1000)
mutate(cran3, size_mb = size / 2^20)
summarize(cran, avg_bytes = mean(size))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
options(RCurlOptions = c(getOption("RCurlOptions"),   ssl.verifypeer = FALSE,  ssl.verifyhost = FALSE ) )
set_config( config( ssl_verifypeer = 0L ) )
library(httr)
library(devtools)
options(RCurlOptions = c(getOption("RCurlOptions"),   ssl.verifypeer = FALSE,  ssl.verifyhost = FALSE ) )
set_config( config( ssl_verifypeer = 0L ) )
install_from_swirl("Getting and Cleaning Data")
swirl()
>read.csv()
?read.csv()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
r_version == "3.1.1", country == "US")
?Comparison
filter(cran,
r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size= size+1000)
summarize(cran, avg_bytes =
mean(size))
kings_data <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip = 3)
kings_ts <- ts(kings_data)
plot.ts(kings_ts)
birth_data <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birth_ts <- ts(birth_data, start = c(1946,1), frequency=12)
rm(birth_data)
rm(kings_data)
plot.ts(birth_ts)
rm(cran)
rm(cran2)
rm(cran3)
item_sale_data <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
item_sale_ts(item_sale_data)
item_sale_ts <- ts(item_sale_data)
rm(item_sale_data)
c(1987,1))
item_sale_ts <- ts(item_sale_data, frequency = 12, start=c(1987,1))
item_sale_data <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
item_sale_ts <- ts(item_sale_data, frequency = 12, start=c(1987,1))
rm(item_sale_data)
plot.ts(item_sale_ts)
log_item_sales <- log(item_sale_ts)
plot.ts(log_item_sales)
install.packages("TTR")
birthtime_seasonalComp <- decompose(birth_ts)
birthtime_seasonalComp
plot(birthtime_seasonalComp)
birth_ts_seas_neg <- birth_ts-birthtime_seasonalComp$seasonal
plot(birth_ts_seas_neg)
install.packages("TTR")
library(TTR)
kingtimeSMA3 <- SMA(kings_ts, n=3)
plot(kingtimeSMA3)
kingtimeSMA5 <- SMA(kings_ts, n=5)
plot(kingtimeSMA5)
kingtimeSMA8 <- SMA(kings_ts, n=8)
plot(kingtimeSMA8)
kingtimeSMA5
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat")
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat", skip=1)
rain_ts <- ts(rain)
rain_ts <- ts(rain, start = c(1813))
mean(rain)
plot.ts(rain_ts)
plot(rain)
rainseriesForecast <- HoltWinters(rain_ts, beta=FALSE, gamma= FALSE)
plot(rainseriesForecast)
?as.factor
install.packages("RTextTools")
install.packages("e1071")
library(RTextTools)
library(e1071)
pos_tweets =  rbind(
c('I love this car', 'positive'),
c('This view is amazing', 'positive'),
c('I feel great this morning', 'positive'),
c('I am so excited about the concert', 'positive'),
c('He is my best friend', 'positive')
)
neg_tweets = rbind(
c('I do not like this car', 'negative'),
c('This view is horrible', 'negative'),
c('I feel tired this morning', 'negative'),
c('I am not looking forward to the concert', 'negative'),
c('He is my enemy', 'negative')
)
test_tweets = rbind(
c('feel happy this morning', 'positive'),
c('larry friend', 'positive'),
c('not like that man', 'negative'),
c('house not great', 'negative'),
c('your song annoying', 'negative')
)
tweets = rbind(pos_tweets, neg_tweets, test_tweets)
tweets
# build dtm
matrix= create_matrix(tweets[,1], language="english",
removeStopwords=FALSE, removeNumbers=TRUE,
stemWords=FALSE)
library(RTextTools)
# build dtm
matrix= create_matrix(tweets[,1], language="english",
removeStopwords=FALSE, removeNumbers=TRUE,
stemWords=FALSE)
install.spackages("sentiment")
install.packages("sentiment")
install.packages("tm")
library(tm)
# build dtm
matrix= create_matrix(tweets[,1], language="english",
removeStopwords=FALSE, removeNumbers=TRUE,
stemWords=FALSE)
as.factor(tweets(1:10), 2)
as.factor(tweets(1:10, 2)
factorTweet <- as.factor(tweets(1:10, 2)
factorTweet <- as.factor(tweets(1:10, 2)
str(iris)
rm(birth_ts)
rm(birth_ts_seas_neg)
rm(birthtime_seasonalComp)
rm(item_sale_ts)
rm(kings_ts)
rm(kingstimeSMA3)
rm(kingtimeSMA3)
rm(kingtimeSMA5)
rm(kingtimeSMA8)
rm(log_item_sales)
rm(rain)
rm(rain_ts)
rm(rainseriesForecast)
data_bodyfat <- data("bodyfat", package= "mboost")
install.packages("mboost")
library(mboost)
install.packages("mboost")
library(mboost)
rm(birth_ts)
rm(bi)
rm(birth_ts_seas_neg)
rm(birthtime_seasonalComp)
rm(item_sale_ts)
rm(kings_ts)
rm(kingtimeSMA3)
rm(kingtimeSMA5)
rm(kingtimeSMA8)
rm(rain)
rm(rain_ts)
rm(log_item_sales)
rm(rainseriesForecast)
install.packages("mboost")
rm(list=ls())
setwd("C:/Users/abc/Downloads/DataSets/mart_sale")
train_data <- read.csv("Train_UWu5bXk.csv", na.strings = c("",",","."))
test_data <- read.csv("Test_u94Q5KV.csv", na.strings = c("",",","."))
train_data_2 <- train_data
test_data_2 <- test_data
library(DMwR)
install.packages("DMwR")
install.packages("DMwR")
library(DMwR)
train_data_2 <- knnImputation(train_data_2, k=10)
test_data_2 <- knnImputation(test_data_2, k=10)
train_data_2$Item_Visibility <- NULL
test_data_2$Item_Visibility <- NULL
model_lm <- lm(Item_Outlet_Sales~., data = train_data_2)
prediction <- predict(model_lm, newdata = test_data_2)
as.data.frame(prediction)
test_data_2$Item_Outlet_Sales <- prediction
write.csv(test_data_2, file="final_soln_with_year.csv")
test_data_3 <- test_data
train_data_3 <- train_data
test_data_3 <- knnImputation(test_data_3, k=10)
train_data_3 <- knnImputation(test_data_3, k=10)
train_data_3 <- train_data
train_data_3 <- knnImputation(test_data_3, k=10)
model_lm2 <- lm(Item_Outlet_Sales~., data = train_data_3)
